Three Trios Game

Overview:
Three Trios is a two-player strategy game inspired by Triple Triad. In Three Trios, players take
turns placing custom cards onto a grid of cells. The goal is to own the most cards on the board by
the end of the game, achieved through strategic placements and battles. Each player has a
designated color (blue or red) and a unique hand of cards.

When a card is placed next to an opponent’s card, a "battle" begins which compares the adjacent
values. The card with the higher value flips the opponent’s card to its color. The game ends when
all playable cells are filled, with the player owning the most cards declared the winner.

Assumptions:
A grid layout containing card cells (for placements) and holes (unplayable cells).
An odd number of playable cells and an even number of cards dealt to ensure a balanced start.

Quick Start:
To get started with the Three Trios codebase, here’s a basic example of how to initialize and play
a turn:

public class ThreeTriosQuickStartTest {
    @Test
    public void testGameStartAndFirstTurn() {
        // Sample deck
        List<Card> deck = List.of(
                new SimpleCard("rat", Value.ACE, Value.ONE, Value.TWO, Value.THREE),
                new SimpleCard("ox", Value.TWO, Value.FOUR, Value.FOUR, Value.FOUR)
        );

        // Create a game grid, specifying holes (unplayable cells)
        GameGrid grid = new GameGrid(3, 3, new boolean[][] {
                {false, true},
                {true, true}
        });

        // Initialize the model
        ThreeTriosModel model = new ThreeTriosModel();

        // Start the game
        model.startGame(deck, true, grid);

        // Take a turn by placing a card in the current player's hand
        Card cardToPlace = model.getCurrentPlayer().getCardsInHand().get(0);
        model.takeTurn(cardToPlace, 0, 0);

        // Initialize a TextView to see outcome
        ThreeTriosGameTextView view = new ThreeTriosGameTextView(model);
    }
}

Key Components:
Card Interface: Defines core card attributes and actions, such as flipping colors.
    SimpleCard: Implements the Card interface, representing cards with a name, color, and
    directional values.

Player Interface: Manages player-specific details like color, cards in hand, and moves.
    HumanPlayer: Implements Player, tracking the player's hand, cards on the grid, and color, with
    methods for managing and transferring card ownership.

Cell Interface: Represents individual squares on the board, which may hold a card or be a hole.
    GameCell: Implements Cell, distinguishing between card cells and holes, with methods for card
    placement and retrieval.

Grid Interface: Defines the game board structure, tracking cells and card placements.
    GameGrid: Implements Grid, storing the board’s layout, including cells and holes, and managing
    card locations during play.

Source Organization:
cs3500.threetrios.model:
    ThreeTriosModel - Core gameplay model, handling all primary game mechanics.
    SimpleCard - Represents cards used in the game, with defined directions and values.
    Player - Interface for players in the game; HumanPlayer manages player-specific actions.
    GameGrid - The game board, a grid containing cells for card placements and holes.
    GameCell - A cell on the game board, tracking whether it’s a card cell or hole.

cs3500.threetrios.view:
    ThreeTriosGameTextView - A text-based rendering of the current game state, useful for debugging
    or console-based gameplay.


Changes Made in Part 2:
    Card Class Modification
        -Removed color field from Card class and added a method in Model to handle the
        functionality of determining card ownership by color.

    Added required observation methods to Model as specified in Assignment 6:
        -List<Card> getRedPlayer(): Retrieves the red player’s cards.
        -List<Card> getBluePlayer(): Retrieves the blue player’s cards.
        -Player getOwnerAtCell(int row, int col): Gets the player owning the card at the
        specified cell.
        -boolean isLegalToPlay(int row, int col): Checks if a move is legal at the specified
        position.
        -int howManyWillFlip(Card card, int row, int col): Determines the number of opponent
        cards that would flip if the specified card is placed.
        -int currentScore(Player player): Retrieves the current score for a player.

    Player Interface Update:
        -Added a method in the Player interface to enable adding cards to a player's hand.

    New Classes and Interfaces
        -Strategy Package (cs3500.threetrios.strategy)
            -GameStrategy (interface): Defines the strategy interface for the game.
            -GameMove (class): Represents a move within the game, including the card and position.
            -CornerCardStrat (class): Implements a strategy that prioritizes selecting corner cells.
            -MaxFlippedCardsStrat (class): Implements a strategy that prioritizes flipping the maximum number of opponent cards.
        -View Package (cs3500.threetrios.view)
            -ThreeTriosFrameView (interface): Defines the structure for the game’s frame view.
            -ThreeTriosPanelView (interface): Defines the structure for the game’s panel view.
            -ThreeTriosModelView (class): Implements ThreeTriosFrameView, managing the frame-level display for the game.
            -ThreeTriosPanel (class): Implements ThreeTriosPanelView, managing the panel-level display for the game.

Changes Made in Part 3:
    Fixed Flooding in the Battling Phase of Model:
        -Resolved an issue in the battling phase where excessive card flipping occurred due to improper adjacency checks.
        -Improved the logic to ensure that chain reactions of flips are calculated accurately and terminate correctly, preventing infinite loops.

    New Classes and Interfaces
        -View Package (cs3500.threetrios.view):
        -PlayerAction (interface):
            -Defines the structure for actions performed by players, including moves and card placements.
            -Allows interaction between the controller and the view
        -Model Package (cs3500.threetrios.model):
        -ModelStatus (interface):
            -Provides a querying method of the game model's current state.
            -Separates observation methods from modification methods in the model
        -Controller Package (cs3500.threetrios.controller):
        -PlayerController (interface):
            -Defines the structure for controllers managing individual players.
            -Allows the controller to handle player input (human or AI) and execute actions in the model.